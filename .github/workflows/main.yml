name: Java
on: push
jobs:
  Java-CI:
    runs-on: ubuntu-latest

    steps:
      - name: Code Checkout
        uses: actions/checkout@master

      - name: Fetch all history for all tags and branches, Install and Determine Version using GitVersion
        id: gitversion
        uses: gittools/actions/gitversion@v5.7.0
        with:
          fetch-depth: 0

      - name: Display GitVersion outputs (step output)
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      # - name: Run GitVersion
      #   run: |
      #     gitversion

      # - name: Set version number
      #   run: echo "VERSION=$(/tools/dotnet-gitversion /output buildserver)" >> $GITHUB_ENV

      # - name: Echo version number
      #   run: echo $GITHUB_ENV

      # - name: Setup Java
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: '17'

      # - name: Build with Maven
      #   run: cd Java && mvn clean package

      # - name: Install Snyk CLI
      #   run: |     
      #     curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
      #     sudo apt-get install -y nodejs
      #     sudo npm install -g snyk  

      # - name: Run Snyk test
      #   run: |
      #     cd Java
      #     chmod +x mvnw
      #     ./mvnw dependency:tree -DoutputType=dot --batch-mode --non-recursive --file="pom.xml" > dependency-graph.dot
      #     snyk test --file=pom.xml     
      #   continue-on-error: true
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # - name: Push Trivy scan results to DI Accelerator
      #   if: success()
      #   env:
      #     APPLICATION_NAME: Sample-java
      #     VERSION: 1.0.0
      #   run: |
      #     cd Java
      #     curl -X POST \
      #       -H "Authorization: Token ${{ secrets.DI_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       -d "@aqua-results.json" \
      #       "https://di-accelerator.kyndryl-cloud.com/dash/api/dev_secops/v3/technical-services/image-scan/aqua/vulnerabilities?technicalServiceName=$APPLICATION_NAME:$VERSION"